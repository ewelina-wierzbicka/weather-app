{"version":3,"sources":["slice.ts","components/style.js","components/DailyWeather.tsx","selectors.ts","schemas.js","components/Form.tsx","rootReducer.js","store.js","App.jsx","serviceWorker.js","index.jsx"],"names":["weatherSlice","createSlice","name","initialState","city","loading","weatherList","error","reducers","citySubmitted","state","payload","requestWeatherSuccess","requestWeather","requestWeatherFail","actions","useStyles","createUseStyles","cityInput","width","margin","backgroundColor","border","borderBottom","outline","transition","cityError","color","submitButton","height","borderRadius","whiteSpace","display","padding","temperature","fontSize","fontWeight","DailyWeather","weather","classes","date","format","fromUnixTime","dt","Math","round","temp","day","iconSrc","icon","src","alt","className","type","status","percent","clouds","getCity","getLoading","getWeather","CitySchema","Yup","shape","required","CityForm","dispatch","useDispatch","useSelector","initialValues","onSubmit","value","a","console","log","process","fetch","request","ok","Error","statusText","json","coord","lat","lon","secondRequest","secondJson","daily","message","fetchWeather","validationSchema","formik","htmlFor","id","errors","LoadingOutlined","spin","map","key","toString","rootReducer","weatherReducer","store","configureStore","reducer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a8f34d58.chunk.js","sourcesContent":["import { createSlice, Dispatch } from \"@reduxjs/toolkit\";\n\nexport interface WeatherState {\n  weatherList: Array<Weather>,\n  city: string,\n  loading: boolean,\n  error: {}\n}\n\nexport interface Weather {\n  dt: number, temp: {day: number}, weather: Array<{icon: string}>, clouds: number\n}\n\nconst initialState: WeatherState = {city: \"\", loading: false, weatherList: [], error: {}};\n\nconst weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    citySubmitted(state, {payload}) {\n      state.city = payload;\n    },\n    requestWeatherSuccess(state, {payload}) {\n      state.weatherList = payload;\n      state.loading = false;\n    },\n    requestWeather(state) {\n      state.loading = true;\n    },\n    requestWeatherFail(state, {payload}) {\n      state.loading = false;\n      state.error = payload;\n    },\n  },\n});\n\nexport const {\n  citySubmitted,\n  requestWeatherSuccess,\n  requestWeather,\n  requestWeatherFail,\n} = weatherSlice.actions;\n\nexport function fetchWeather(value: string) {\n  return async function (dispatch: Dispatch) {\n    dispatch(requestWeather());\n    try {\n      console.log(process.env);\n      const request = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=${process.env.REACT_APP_OPEN_WEATHER_ID}&units=metric`\n      );\n      if (!request.ok) {\n        throw new Error(`${request.status} - ${request.statusText}`);\n      }\n      const json = await request.json();\n      const secondRequest = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${json.coord.lat}&lon=${json.coord.lon}&exclude=current,minutely,hourly&appid=${process.env.REACT_APP_OPEN_WEATHER_ID}&units=metric`\n      );\n      if (!secondRequest.ok) {\n        throw new Error(`${secondRequest.status} - ${secondRequest.statusText}`);\n      }\n      const secondJson = await secondRequest.json();\n      dispatch(requestWeatherSuccess(secondJson.daily));\n    } catch (error) {\n      dispatch(requestWeatherFail(error.message));\n    }\n  };\n}\n\nexport default weatherSlice.reducer;\n","import {\n  createUseStyles\n} from \"react-jss\";\n\nconst useStyles = createUseStyles({\n  cityInput: {\n    width: 150,\n    margin: 20,\n    backgroundColor: 'transparent',\n    border: 0,\n    borderBottom: '4px solid #fff4de',\n    outline: 0,\n    '&:-webkit-autofill': {\n      transition: 'background-color 5000s',\n    },\n  },\n cityError: {\n    color: 'red',\n  },\n  submitButton: {\n    width: 120,\n    height: 120,\n    borderRadius: '100%',\n    margin: 20,\n    backgroundColor: '#fff4de',\n    border: '4px solid white',\n    whiteSpace: 'normal',\n    outline: 0,\n  },\n  weatherList: {\n    '& >*': {\n      display: 'inline-block',\n      margin: 20,\n      padding: 10,\n      border: '4px solid #fff4de',\n      backgroundColor: 'rgba(255,255,255,0.8)',\n    }\n  },\n  temperature: {\n    fontSize: 30,\n    fontWeight: '100',\n    padding: 10,\n  },\n  loading: {\n    fontSize: 34,\n  },\n});\n\nexport default useStyles;","import React from \"react\";\nimport { Progress } from \"antd\";\nimport { format, fromUnixTime } from \"date-fns\";\nimport useStyles from \"./style\";\nimport { Weather } from \"../slice\"\n\nconst DailyWeather: React.FC<{weather: Weather}> = ({weather}) => {\n  const classes = useStyles();\n  const date = format(fromUnixTime(weather.dt), \"dd.MM.yyyy\");\n  const temperature = Math.round(weather.temp.day);\n  const iconSrc = `http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`\n\n  return (\n    <div>\n      {weather && (\n        <div>\n          <p>{date}</p>\n          <img src={iconSrc} alt=\"\" />\n          <p>\n            Temperatura: \n            <span className={classes.temperature}>\n              {temperature}\n              Â°C\n            </span>\n          </p>\n          <p>\n            Zachmurzenie: \n            <Progress type=\"circle\" status=\"normal\" percent={weather.clouds} />\n          </p>          \n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DailyWeather;\n","import { WeatherState } from \"./slice\";\n\nexport const getCity = (state: WeatherState) => state.city;\nexport const getLoading = (state: WeatherState) => state.loading;\nexport const getWeather = (state: WeatherState) => state.weatherList;","import * as Yup from \"yup\";\n\nexport const CitySchema = Yup.object().shape({\n    city: Yup.string().required(\"Wpisz miasto\"),\n  });","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { Formik, Form, Field } from \"formik\";\nimport { citySubmitted, fetchWeather } from \"../slice\";\nimport DailyWeather from \"./DailyWeather\";\nimport useStyles from \"./style\";\nimport { getCity, getLoading, getWeather } from \"../selectors\";\nimport { CitySchema } from \"../schemas\";\n\nconst CityForm: React.FC<{}> = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const city = useSelector(getCity);\n  const loading = useSelector(getLoading);\n  const weatherList = useSelector(getWeather);\n\n  const handleSubmit = (value: {city: string}) => {\n    dispatch(citySubmitted(value.city));\n    dispatch(fetchWeather(value.city));\n  };\n\n \n\n  return (\n    <>\n      <Formik\n        initialValues={{ city: \"\" }}\n        onSubmit={handleSubmit}\n        validationSchema={CitySchema}\n      >\n        {(formik) => (\n          <Form>\n            <label htmlFor=\"city\">\n              Miasto:\n              <Field id=\"city\" className={classes.cityInput} type=\"text\" name=\"city\" />\n              <p className={classes.cityError}>{formik.errors.city}</p>\n            </label>\n            <div>\n              <button className={classes.submitButton} type=\"submit\">\n                POKAÅ» PROGNOZÄ POGODY\n              </button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      <p>\n        Wybrane miasto: \n        {city}\n      </p>\n      {loading && <LoadingOutlined className={classes.loading} spin />}\n      <div className={classes.weatherList}>\n        {weatherList.map((weather) => (\n          <DailyWeather key={weather.dt.toString()} weather={weather} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default CityForm;\n","import weatherReducer from './slice'\n\nconst rootReducer = weatherReducer;\nexport default rootReducer;","import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n    reducer: rootReducer\n})\n\nexport default store;\n\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport CityForm from \"./components/Form\";\nimport store from \"./store\";\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"App\">\n      <CityForm />\n    </div>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}