{"version":3,"sources":["slice.ts","components/style.js","components/DailyWeather.tsx","selectors.ts","schemas.js","components/Form.tsx","rootReducer.js","store.js","App.jsx","serviceWorker.js","index.jsx"],"names":["weatherSlice","createSlice","name","initialState","city","loading","weatherList","error","reducers","citySubmitted","state","payload","requestWeatherSuccess","requestWeather","requestWeatherFail","actions","useStyles","createUseStyles","cityInput","width","margin","backgroundColor","border","borderBottom","outline","transition","cityError","color","submitButton","height","borderRadius","whiteSpace","display","padding","temperature","fontSize","fontWeight","DailyWeather","weather","classes","date","format","fromUnixTime","dt","Math","round","temp","day","iconSrc","icon","src","alt","className","type","status","percent","clouds","getCity","getLoading","getWeather","CitySchema","Yup","shape","required","CityForm","dispatch","useDispatch","useSelector","initialValues","onSubmit","value","a","fetch","process","REACT_APP_OPEN_WEATHER_ID","request","ok","Error","statusText","json","coord","lat","lon","secondRequest","secondJson","daily","message","fetchWeather","validationSchema","formik","htmlFor","id","errors","LoadingOutlined","spin","map","key","toString","rootReducer","weatherReducer","store","configureStore","reducer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4fb80be2.chunk.js","sourcesContent":["import { createSlice, Dispatch } from \"@reduxjs/toolkit\";\r\n\r\nexport interface WeatherState {\r\n  weatherList: Array<Weather>,\r\n  city: string,\r\n  loading: boolean,\r\n  error: {}\r\n}\r\n\r\nexport interface Weather {\r\n  dt: number, temp: {day: number}, weather: Array<{icon: string}>, clouds: number\r\n}\r\n\r\nconst initialState: WeatherState = {city: \"\", loading: false, weatherList: [], error: {}};\r\n\r\nconst weatherSlice = createSlice({\r\n  name: \"weather\",\r\n  initialState,\r\n  reducers: {\r\n    citySubmitted(state, {payload}) {\r\n      state.city = payload;\r\n    },\r\n    requestWeatherSuccess(state, {payload}) {\r\n      state.weatherList = payload;\r\n      state.loading = false;\r\n    },\r\n    requestWeather(state) {\r\n      state.loading = true;\r\n    },\r\n    requestWeatherFail(state, {payload}) {\r\n      state.loading = false;\r\n      state.error = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  citySubmitted,\r\n  requestWeatherSuccess,\r\n  requestWeather,\r\n  requestWeatherFail,\r\n} = weatherSlice.actions;\r\n\r\nexport function fetchWeather(value: string) {\r\n  return async function (dispatch: Dispatch) {\r\n    dispatch(requestWeather());\r\n    try {\r\n      const request = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=${process.env.REACT_APP_OPEN_WEATHER_ID}&units=metric`\r\n      );\r\n      if (!request.ok) {\r\n        throw new Error(`${request.status} - ${request.statusText}`);\r\n      }\r\n      const json = await request.json();\r\n      const secondRequest = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${json.coord.lat}&lon=${json.coord.lon}&exclude=current,minutely,hourly&appid=${process.env.REACT_APP_OPEN_WEATHER_ID}&units=metric`\r\n      );\r\n      if (!secondRequest.ok) {\r\n        throw new Error(`${secondRequest.status} - ${secondRequest.statusText}`);\r\n      }\r\n      const secondJson = await secondRequest.json();\r\n      dispatch(requestWeatherSuccess(secondJson.daily));\r\n    } catch (error) {\r\n      dispatch(requestWeatherFail(error.message));\r\n    }\r\n  };\r\n}\r\n\r\nexport default weatherSlice.reducer;\r\n","import {\r\n  createUseStyles\r\n} from \"react-jss\";\r\n\r\nconst useStyles = createUseStyles({\r\n  cityInput: {\r\n    width: 150,\r\n    margin: 20,\r\n    backgroundColor: 'transparent',\r\n    border: 0,\r\n    borderBottom: '4px solid #fff4de',\r\n    outline: 0,\r\n    '&:-webkit-autofill': {\r\n      transition: 'background-color 5000s',\r\n    },\r\n  },\r\n cityError: {\r\n    color: 'red',\r\n  },\r\n  submitButton: {\r\n    width: 120,\r\n    height: 120,\r\n    borderRadius: '100%',\r\n    margin: 20,\r\n    backgroundColor: '#fff4de',\r\n    border: '4px solid white',\r\n    whiteSpace: 'normal',\r\n    outline: 0,\r\n  },\r\n  weatherList: {\r\n    '& >*': {\r\n      display: 'inline-block',\r\n      margin: 20,\r\n      padding: 10,\r\n      border: '4px solid #fff4de',\r\n      backgroundColor: 'rgba(255,255,255,0.8)',\r\n    }\r\n  },\r\n  temperature: {\r\n    fontSize: 30,\r\n    fontWeight: '100',\r\n    padding: 10,\r\n  },\r\n  loading: {\r\n    fontSize: 34,\r\n  },\r\n});\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport { Progress } from \"antd\";\r\nimport { format, fromUnixTime } from \"date-fns\";\r\nimport useStyles from \"./style\";\r\nimport { Weather } from \"../slice\"\r\n\r\nconst DailyWeather: React.FC<{weather: Weather}> = ({weather}) => {\r\n  const classes = useStyles();\r\n  const date = format(fromUnixTime(weather.dt), \"dd.MM.yyyy\");\r\n  const temperature = Math.round(weather.temp.day);\r\n  const iconSrc = `http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`\r\n\r\n  return (\r\n    <div>\r\n      {weather && (\r\n        <div>\r\n          <p>{date}</p>\r\n          <img src={iconSrc} alt=\"\" />\r\n          <p>\r\n            Temperatura: \r\n            <span className={classes.temperature}>\r\n              {temperature}\r\n              Â°C\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Zachmurzenie: \r\n            <Progress type=\"circle\" status=\"normal\" percent={weather.clouds} />\r\n          </p>          \r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyWeather;\r\n","import { WeatherState } from \"./slice\";\r\n\r\nexport const getCity = (state: WeatherState) => state.city;\r\nexport const getLoading = (state: WeatherState) => state.loading;\r\nexport const getWeather = (state: WeatherState) => state.weatherList;","import * as Yup from \"yup\";\r\n\r\nexport const CitySchema = Yup.object().shape({\r\n    city: Yup.string().required(\"Wpisz miasto\"),\r\n  });","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { citySubmitted, fetchWeather } from \"../slice\";\r\nimport DailyWeather from \"./DailyWeather\";\r\nimport useStyles from \"./style\";\r\nimport { getCity, getLoading, getWeather } from \"../selectors\";\r\nimport { CitySchema } from \"../schemas\";\r\n\r\nconst CityForm: React.FC<{}> = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const city = useSelector(getCity);\r\n  const loading = useSelector(getLoading);\r\n  const weatherList = useSelector(getWeather);\r\n\r\n  const handleSubmit = (value: {city: string}) => {\r\n    dispatch(citySubmitted(value.city));\r\n    dispatch(fetchWeather(value.city));\r\n  };\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ city: \"\" }}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={CitySchema}\r\n      >\r\n        {(formik) => (\r\n          <Form>\r\n            <label htmlFor=\"city\">\r\n              Miasto:\r\n              <Field id=\"city\" className={classes.cityInput} type=\"text\" name=\"city\" />\r\n              <p className={classes.cityError}>{formik.errors.city}</p>\r\n            </label>\r\n            <div>\r\n              <button className={classes.submitButton} type=\"submit\">\r\n                POKAÅ» PROGNOZÄ POGODY\r\n              </button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <p>\r\n        Wybrane miasto: \r\n        {city}\r\n      </p>\r\n      {loading && <LoadingOutlined className={classes.loading} spin />}\r\n      <div className={classes.weatherList}>\r\n        {weatherList.map((weather) => (\r\n          <DailyWeather key={weather.dt.toString()} weather={weather} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityForm;\r\n","import weatherReducer from './slice'\r\n\r\nconst rootReducer = weatherReducer;\r\nexport default rootReducer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from './rootReducer';\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\nexport default store;\r\n\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport CityForm from \"./components/Form\";\r\nimport store from \"./store\";\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <div className=\"App\">\r\n      <CityForm />\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}